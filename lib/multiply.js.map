{"version":3,"sources":["multiply.js"],"names":[],"mappings":";;;;;;;AAKA,IAAI,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;AACrC,IAAI,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;AAC7B,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;;;;;;;;;;;;AAY5B,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC;MAAE,QAAQ,yDAAG,CAAC,CAAC,MAAM,GAAG,CAAC;MAAE,QAAQ,yDAAG,CAAC,CAAC,MAAM,GAAG,CAAC;MAAE,IAAI,yDAAG,CAAC,EAAE,CAAC;MAAE,KAAK,yDAAG,CAAC;sBAAE;AACtG,QAAI,QAAQ,GAAG,CAAC,IAAI,QAAQ,GAAG,CAAC,EAAE;;AAEhC,UAAI,KAAK,EAAE;AACT,YAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;OACrC;;AAED,UAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAA;AAC1B,UAAI,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAA;AAC/B,WAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACb,UAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAChB,aAAO,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,GAAG,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,CAAA;KAC9D,MAAM,IAAI,QAAQ,GAAG,CAAC,IAAI,QAAQ,KAAK,CAAC,EAAE;;AAEzC,UAAI,KAAK,EAAE;AACT,YAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;OACrC;;AAED,aAAO,IAAI,CAAA;KACZ,MAAM;AACL,UAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;;AAEhC,UAAI,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAA;AAC9C,UAAI,GAAG,GAAG,MAAM,GAAG,EAAE,CAAA;AACrB,UAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;AACjB,UAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAA;AAC5B,aAAO,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,MAAM,GAAG,GAAG,CAAA,GAAI,EAAE,CAAC,CAAA;KAC/E;GACF;CAAA;;;;;;;AAOD,SAAS,YAAY,CAAC,IAAI,EAAE;AAC1B,SAAO,IAAI,CAAC,MAAM,CAAC,UAAS,GAAG,EAAE,CAAC,EAAE;AAClC,WAAO,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;GAChC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;CACf;;;;;;;;AAQD,SAAS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE;AACtB,MAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;AACtB,MAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;AACtB,MAAI,OAAO,GAAG,YAAY,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAA;;AAE/C,MAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;AACrB,WAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;GAC9B,MAAM;AACL,WAAO,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;GACnC;CACF;;;;;;AAMD,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAA","file":"multiply.js","sourcesContent":["/**\n * Defines muliplication of integers and two helper functions to calculate the product.\n * @module multiply\n */\n\nvar integer = require('./factory.js')\nvar add = require('./add.js')\nvar clone = require('clone')\n\n/**\n * Recursively mutliplies two arrays of digits x and y and returns an array of arrays of the digits to add up.\n * @param  {Array} x        The first array of digits.\n * @param  {Array} y        The second array of digits.\n * @param  {Number} [botIndex = y.length - 1] The current index on the bottom row for the next multiplication.\n * @param  {Number} [topIndex=x.length - 1] The current index on the top row for the next muliplication.\n * @param  {Array}  [rows=[[]]]     Keeps track of any past calculations and results.\n * @param  {Number} [round=0]    The value (if any) to round the next calculation by.\n * @return {Array}          Returns an array with the arrays of numbers to sum up to get the product.\n */\nfunction multiplyHelper(x, y, botIndex = y.length - 1, topIndex = x.length - 1, rows = [[]], round = 0) {\n  if (topIndex < 0 && botIndex > 0) {\n    // If there is a digit to round add that before starting a new row.\n    if (round) {\n      rows[rows.length - 1].unshift(round)\n    }\n\n    var numZeros = rows.length\n    var blank = new Array(numZeros)\n    blank.fill(0)\n    rows.push(blank)\n    return multiplyHelper(x, y, botIndex - 1, x.length - 1, rows)\n  } else if (topIndex < 0 && botIndex === 0) {\n    // Add any rounding digits before finishing the calculation\n    if (round) {\n      rows[rows.length - 1].unshift(round)\n    }\n\n    return rows\n  } else {\n    var temp = rows[rows.length - 1]\n    // Round the digit if it is greater than 10\n    var rawNum = y[botIndex] * x[topIndex] + round\n    var num = rawNum % 10\n    temp.unshift(num)\n    rows[rows.length - 1] = temp\n    return multiplyHelper(x, y, botIndex, topIndex - 1, rows, (rawNum - num) / 10)\n  }\n}\n\n/**\n * Sums up arrays of digits resulting from multiplication and returns an integer.\n * @param  {Array} rows An array of rows of digits resulting from multiplcation.\n * @return {integer}      Returns an integer with positive sign and value = the sum of rows.\n */\nfunction sumMultiples(rows) {\n  return rows.reduce(function(acc, a) {\n    return add.add(acc, integer(a))\n  }, integer(0))\n}\n\n/**\n * Wraps the muliplication helper functions and adds the correct sign.\n * @param  {integer} a The first integer to multiply.\n * @param  {integer} b The second integer to multiply.\n * @return {integer}   The product of a and b.\n */\nfunction multiply(a, b) {\n  var x = clone(a.value)\n  var y = clone(b.value)\n  var product = sumMultiples(multiplyHelper(x,y))\n\n  if (a.sign === b.sign) {\n    return integer(product.value)\n  } else {\n    return integer(product.value, '-')\n  }\n}\n\n/**\n * Returns the multiply function\n * @type {function}\n */\nmodule.exports = multiply\n"],"sourceRoot":"/source/"}