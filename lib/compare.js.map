{"version":3,"sources":["compare.js"],"names":[],"mappings":";;;;;;;AAKA,IAAI,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;;;;;;;;AAQrC,SAAS,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE;AAC3B,MAAI,CAAC,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,EAAE;AACpC,WAAO,IAAI,CAAA;GACZ,MAAM,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,EAAE;AAC3C,WAAO,KAAK,CAAA;GACb,MAAM,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,EAAE;AAC3C,WAAO,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAA;GAC1D,MAAM,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EAAE;AAC9B,WAAO,IAAI,CAAA;GACZ,MAAM,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EAAE;AAC9B,WAAO,KAAK,CAAA;GACb,MAAM;AACL,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACjC,UAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;AAC3B,eAAO,IAAI,CAAA;OACZ,MAAM,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;AAClC,eAAO,KAAK,CAAA;OACb;KACF;AACD,WAAO,IAAI,CAAA;GACZ;CACF;;;;;;;;AAQD,SAAS,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;;AAEnB,SAAO,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,UAAS,CAAC,EAAE,CAAC,EAAE;AAAC,WAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;GAAC,CAAC,CAAA;CACtH;;;;;;;;AAQD,SAAS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE;AACtB,SAAO,CAAC,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAAA;CACnB;;;;;;;;AAQD,SAAS,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE;AACzB,SAAO,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;CAC7C;;;;;;;;AAQD,SAAS,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE;AACxB,SAAO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;CAC1B;;;;;;;;AAQD,SAAS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE;AACtB,SAAO,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;CAC5B;;;;;;AAMD,MAAM,CAAC,OAAO,GAAG;AACf,eAAa,EAAb,aAAa;AACb,aAAW,EAAX,WAAW;AACX,YAAU,EAAV,UAAU;AACV,UAAQ,EAAR,QAAQ;AACR,OAAK,EAAL,KAAK;AACL,UAAQ,EAAR,QAAQ;CACT,CAAA","file":"compare.js","sourcesContent":["/**\n * Defines various comparison operators for integers.\n * @module compare\n */\n\nvar integer = require('./factory.js')\n\n/**\n * Tests if integer a is greater than integer b and returns a boolena.\n * @param  {integer} a The first integer.\n * @param  {integer} b The second integer.\n * @return {boolean}   Returns true iff a > b.\n */\nfunction greaterThanEq(a, b) {\n  if (a.sign === '+' && b.sign === '-') {\n    return true\n  } else if (a.sign === '-' && b.sign === '+') {\n    return false\n  } else if (a.sign === '-' && b.sign === '-') {\n    return !greaterThanEq(integer(a.value), integer(b.value))\n  } else if (a.digits > b.digits) {\n    return true\n  } else if (b.digits > a.digits) {\n    return false\n  } else {\n    for (var i = 0; i < a.digits; ++i) {\n      if (a.value[i] > b.value[i]) {\n        return true\n      } else if (b.value[i] > a.value[i]) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/**\n * Tests if integers a and b are equal and returns a boolean.\n * @param  {integer} a The first integer.\n * @param  {integer} b The second integer.\n * @return {boolean}   Returns true iff a === b.\n */\nfunction equal(a, b) {\n  // Test that the digits are equal so it rejects early when they are different lengths\n  return a.sign === b.sign && a.digits === b.digits && a.value.every(function(x, i) {return a.value[i] === b.value[i]})\n}\n\n/**\n * Tests if integers a and b are not equal and returns a boolean.\n * @param  {integer} a The first integer.\n * @param  {integer} b The second integer.\n * @return {boolean}   Returns true iff a !== b.\n */\nfunction notEqual(a, b) {\n  return !equal(a,b)\n}\n\n/**\n * Tests if integer a is strictly greater than integer b and returns a boolean.\n * @param  {integer} a The first integer.\n * @param  {integer} b The second integer.\n * @return {boolean}   Returns true iff a > b.\n */\nfunction greaterThan(a, b) {\n  return greaterThanEq(a, b) && notEqual(a, b)\n}\n\n/**\n * Tests if integer a is less than or equal to integer b and returns a boolean.\n * @param  {integer} a The first integer.\n * @param  {integer} b The second integer.\n * @return {boolean}   Returns true iff a <= b.\n */\nfunction lessThanEq(a, b) {\n  return !greaterThan(a, b)\n}\n\n/**\n * Tests if integer a is strictly less than integer b and returns a boolean.\n * @param  {integer} a The first integer.\n * @param  {integer} b The second integer.\n * @return {boolean}   Returns true iff a < b.\n */\nfunction lessThan(a, b) {\n  return !greaterThanEq(a, b)\n}\n\n/**\n * Export comparison operators.\n * @type {Object}\n */\nmodule.exports = {\n  greaterThanEq,\n  greaterThan,\n  lessThanEq,\n  lessThan,\n  equal,\n  notEqual\n}\n"],"sourceRoot":"/source/"}