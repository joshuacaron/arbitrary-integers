{"version":3,"sources":["add.js"],"names":[],"mappings":"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","file":"add.js","sourcesContent":["/**\n * Defines addition and subtraction operations of integers.\n * @module add\n */\n\nvar clone = require('clone')\nvar integer = require('./factory.js')\nvar is = require('./compare.js')\n\n/**\n * Wrapper for helper function to add two arrays representing the digits of 2 natural numbers.\n * @param {Array} a The first array.\n * @param {Array} b The second array.\n * @return {Array} Returns an array with the sum of the digits of x and y.\n */\nfunction addNaturalNumbers(a, b) {\n  var x = clone(a)\n  var y = clone(b)\n\n  var diff = x.length - y.length\n  if (diff < 0) {\n    return addNaturalNumbers(y, x)\n  } else if (diff > 0) {\n    var blank = new Array(diff)\n    blank.fill(0)\n    y = blank.concat(y)\n  }\n\n  return addHelper(x, y)\n}\n\n/**\n * Helper function to recursively add two arrays of digits of natural numbers.\n * @param {Array}  x     The first array of digits.\n * @param {Array}  y     The second array of digits.\n * @param {Array}   [c=[]]     Tracks partially added numbers.\n * @param {Boolean} [round=false] Tracks whether to round the next calculation or not.\n * @return {Array} Returns an array with the sum of the digits of x and y.\n */\nfunction addHelper(x, y, c=[], round=false) {\n  var index = x.length - 1\n  var num = x[index] + y[index]\n\n  if (round) {\n    num += 1\n  }\n\n  if (num >= 10 && index > 0) {\n    c.unshift(num - 10)\n    x.pop()\n    y.pop()\n    return addHelper(x, y, c, true)\n  } else if (num >= 0 && index === 0) {\n    c = num.toString().split('').map(function(a) {return parseInt(a)}).concat(c)\n    return c\n  } else {\n    c.unshift(num)\n    x.pop()\n    y.pop()\n    return addHelper(x, y, c)\n  }\n}\n\n/**\n * Helper function to calculate the nines complement of an array of digits.\n * @param  {Array} x The array of digits to calculate the complement of.\n * @return {Array}   Returns an array with the complement of the input.\n */\nfunction ninesComplement(x) {\n  return x.map(function(a) {\n    return 9 - a\n  })\n}\n\n\n/**\n * Helper function to do simple subtraction when a > b > 0.\n * @param  {Array} a The first array of digits.\n * @param  {Array} b The second array of digits.\n * @return {Array}   Returns an array with the difference between a and b.\n */\nfunction subtractHelper(a, b) {\n  var x = clone(a)\n  var y = clone(b)\n  var z = ninesComplement(addNaturalNumbers(ninesComplement(x), y))\n  return z\n}\n\n/**\n * Wrapper to perform the correct subtract or addition operation depending on signs.\n * @param  {integer} a The minuend.\n * @param  {integer} b The subtruhend.\n * @return {integer}   Returns an integer with the difference between a and b.\n */\nfunction subtract(a, b) {\n  var x = clone(a.value)\n  var y = clone(b.value)\n\n  if (a.sign === '-' && b.sign === '+') {\n    return integer(addNaturalNumbers(x, y), '-')\n  } else if (a.sign === '+' && b.sign === '-') {\n    return integer(addNaturalNumbers(x, y))\n  } else if (a.sign === '-' && b.sign === '-') {\n    return subtract(integer(y), integer(x))\n  } else if (!is.greaterThanEq(a, b)) {\n    return integer(subtract(b, a).value, '-')\n  } else {\n    return integer(subtractHelper(x, y))\n  }\n\n}\n\n/**\n * Wrapper function to perform the correct subtraction or addition operation depending on signs.\n * @param {integer} a The first integer to add.\n * @param {integer} b The second integer to add.\n * @return {integer} Returns the sum of a and b.\n */\nfunction add(a, b) {\n  var sum = addNaturalNumbers(a.value, b.value)\n  if (a.sign === b.sign) {\n    return integer(sum, a.sign)\n  } else if (a.sign === '-' && b.sign === '+') {\n    return subtract(b, integer(a.value))\n  } else if (a.sign === '+' && b.sign === '-') {\n    return subtract(a, integer(b.value))\n  }\n}\n\nmodule.exports = {\n  add,\n  subtract\n}\n"],"sourceRoot":"/source/"}